import static org.junit.Assert.assertEquals;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

// RULES:
//  Any live cell with fewer than two live neighbours dies, as if by underpopulation.
//  Any live cell with two or three live neighbours lives on to the next generation.
//  Any live cell with more than three live neighbours dies, as if by overpopulation.
//  Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.

// ***********************************************************
// Test methods that start with G are for GameOfLife.java
// Test methods that start with T are for TorusGameOfLife.java
// ***********************************************************

public class GOLTester {
    @Test
    public void GOneStep1(){
        int[][] board = {{0,0,0,0,0},
                {0,0,0,0,0},
                {0,1,1,1,0},
                {0,0,0,0,0},
                {0,0,0,0,0}};

        int[][] exp = { {0,0,0,0,0},
                {0,0,1,0,0},
                {0,0,1,0,0},
                {0,0,1,0,0},
                {0,0,0,0,0}};

        GameOfLife t = new GameOfLife(board);
        t.oneStep();
        assertEquals(exp, t.getBoard());
    }

    @Test
    public void GOneStep2(){
        int[][] board = {{0,0,0,0,0,0},
                         {0,0,0,0,0,0},
                         {0,0,1,1,1,0},
                         {0,1,1,1,0,0},
                         {0,0,0,0,0,0},
                         {0,0,0,0,0,0}};

        int[][] exp = { {0,0,0,0,0,0},
                        {0,0,0,1,0,0},
                        {0,1,0,0,1,0},
                        {0,1,0,0,1,0},
                        {0,0,1,0,0,0},
                        {0,0,0,0,0,0}};

        GameOfLife t = new GameOfLife(board);
        t.oneStep();
        assertEquals(exp, t.getBoard());
    }
    @Test
    public void GOneStep3(){
        int[][] board = {{0,0,0,0,0,0},
                         {0,1,1,0,0,0},
                         {0,1,1,0,0,0},
                         {0,0,0,1,1,0},
                         {0,0,0,1,1,0},
                         {0,0,0,0,0,0}};

        int[][] exp = { {0,0,0,0,0,0},
                        {0,1,1,0,0,0},
                        {0,1,0,0,0,0},
                        {0,0,0,0,1,0},
                        {0,0,0,1,1,0},
                        {0,0,0,0,0,0}};

        GameOfLife t = new GameOfLife(board);
        t.oneStep();
        assertEquals(exp, t.getBoard());
    }
    @Test
    public void GOneStep4(){
        int[][] board = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};

        int[][] exp = { {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};

        GameOfLife t = new GameOfLife(board);
        t.oneStep();
        assertEquals(exp, t.getBoard());

    }
    @Test
    public void GOneStep5(){
        int[][] board = {{0,0,0,0,0,0,0},
                         {0,0,1,1,1,0,0},
                         {0,0,1,0,1,0,0},
                         {0,0,1,0,1,0,0},
                         {0,0,1,0,1,0,0},
                         {0,0,1,1,1,0,0},
                         {0,0,0,0,0,0,0}};

        int[][] exp = { {0,0,0,1,0,0,0},
                        {0,0,1,0,1,0,0},
                        {0,1,1,0,1,1,0},
                        {0,1,1,0,1,1,0},
                        {0,1,1,0,1,1,0},
                        {0,0,1,0,1,0,0},
                        {0,0,0,1,0,0,0}};

        GameOfLife t = new GameOfLife(board);
        t.oneStep();
        assertEquals(exp, t.getBoard());

    }

    @Test
    public void GNeighbors1(){
        int[][] board = {{0,0,0,0,0},
                         {0,0,0,0,0},
                         {0,1,1,1,0},
                         {0,0,0,0,0},
                         {0,0,0,0,0}};

        GameOfLife t = new GameOfLife(board);
        assertEquals(3, t.Neighbors(1,2));
    }

    @Test
    public void GNeighbors2(){
        int[][] board = {{0,0,0,0,0,0},
                         {0,0,0,0,0,0},
                         {0,0,1,1,1,0},
                         {0,1,1,1,0,0},
                         {0,0,0,0,0,0},
                         {0,0,0,0,0,0}};

        GameOfLife t = new GameOfLife(board);
        assertEquals(2, t.Neighbors(2,4));
    }

    @Test
    public void GNeighbors3(){
        int[][] board = {{0,0,0,0,0,0},
                         {0,1,1,0,0,0},
                         {0,1,1,0,0,0},
                         {0,0,0,1,1,0},
                         {0,0,0,1,1,0},
                         {0,0,0,0,0,0}};

        GameOfLife t = new GameOfLife(board);
        assertEquals(4, t.Neighbors(3,3));
    }

    @Test
    public void GNeighbors4(){
        int[][] board = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};

        GameOfLife t = new GameOfLife(board);
        assertEquals(1, t.Neighbors(10,10));
    }

    @Test
    public void GNeighbors5(){
        int[][] board = {{0,0,0,0,0,0,0},
                         {0,0,1,1,1,0,0},
                         {0,0,1,0,1,0,0},
                         {0,0,1,0,1,0,0},
                         {0,0,1,0,1,0,0},
                         {0,0,1,1,1,0,0},
                         {0,0,0,0,0,0,0}};

        GameOfLife t = new GameOfLife(board);
        assertEquals(3, t.Neighbors(6,3));
    }

    @Test
    public void GEvolution1(){
        int[][] board = {{0,0,0,0,0},
                         {0,0,0,0,0},
                         {0,1,1,1,0},
                         {0,0,0,0,0},
                         {0,0,0,0,0}};

        int[][] exp = { {0,0,0,0,0},
                        {0,0,0,0,0},
                        {0,1,1,1,0},
                        {0,0,0,0,0},
                        {0,0,0,0,0}};

        GameOfLife t = new GameOfLife(board);
        t.Evolution(10);
        assertEquals(exp, t.getBoard());
    }

    @Test
    public void GEvolution2(){
        int[][] board = {{0,0,0,0,0,0},
                         {0,0,0,0,0,0},
                         {0,0,1,1,1,0},
                         {0,1,1,1,0,0},
                         {0,0,0,0,0,0},
                         {0,0,0,0,0,0}};

        int[][] exp = { {0,0,0,0,0,0},
                        {0,0,0,0,0,0},
                        {0,0,1,1,1,0},
                        {0,1,1,1,0,0},
                        {0,0,0,0,0,0},
                        {0,0,0,0,0,0}};

        GameOfLife t = new GameOfLife(board);
        t.Evolution(10);
        assertEquals(exp, t.getBoard());
    }
    @Test
    public void GEvolution3(){
        int[][] board = {{0,0,0,0,0,0},
                         {0,1,1,0,0,0},
                         {0,1,1,0,0,0},
                         {0,0,0,1,1,0},
                         {0,0,0,1,1,0},
                         {0,0,0,0,0,0}};

        int[][] exp = { {0,0,0,0,0,0},
                        {0,1,1,0,0,0},
                        {0,1,0,0,0,0},
                        {0,0,0,0,1,0},
                        {0,0,0,1,1,0},
                        {0,0,0,0,0,0}};

        GameOfLife t = new GameOfLife(board);
        t.Evolution(5);
        assertEquals(exp, t.getBoard());
    }
    @Test
    public void GEvolution4(){
        int[][] board = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};

        int[][] exp = { {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};

        GameOfLife t = new GameOfLife(board);
        t.Evolution(1);
        assertEquals(exp, t.getBoard());
    }
    @Test
    public void GEvolution5(){
        int[][] board = {{0,0,0,0,0,0,0},
                         {0,0,1,1,1,0,0},
                         {0,0,1,0,1,0,0},
                         {0,0,1,0,1,0,0},
                         {0,0,1,0,1,0,0},
                         {0,0,1,1,1,0,0},
                         {0,0,0,0,0,0,0}};

        int[][] exp = { {0,0,0,1,0,0,0},
                        {0,1,1,0,1,1,0},
                        {0,0,0,0,0,0,0},
                        {1,0,0,0,0,0,1},
                        {0,0,0,0,0,0,0},
                        {0,1,1,0,1,1,0},
                        {0,0,0,1,0,0,0}};

        GameOfLife t = new GameOfLife(board);
        t.Evolution(2);
        assertEquals(exp, t.getBoard());
    }

    @Test
    public void TOneStep1(){
        int[][] board = {{0,0,0,0,0},
                         {0,0,0,0,0},
                         {0,1,1,1,0},
                         {0,0,0,0,0},
                         {0,0,0,0,0}};

        int[][] exp = { {0,0,0,0,0},
                        {0,0,1,0,0},
                        {0,0,1,0,0},
                        {0,0,1,0,0},
                        {0,0,0,0,0}};

        TorusGameOfLife t = new TorusGameOfLife(board);
        t.oneStep();
        assertEquals(exp, t.getBoard());
    }
    @Test
    public void TOneStep2(){
        int[][] board = {{0,0,0,0,0,0},
                         {0,0,0,0,0,0},
                         {0,0,1,1,1,0},
                         {0,1,1,1,0,0},
                         {0,0,0,0,0,0},
                         {0,0,0,0,0,0}};

        int[][] exp = { {0,0,0,0,0,0},
                        {0,0,0,1,0,0},
                        {0,1,0,0,1,0},
                        {0,1,0,0,1,0},
                        {0,0,1,0,0,0},
                        {0,0,0,0,0,0}};

        TorusGameOfLife t = new TorusGameOfLife(board);
        t.oneStep();
        assertEquals(exp, t.getBoard());
    }
    @Test
    public void TOneStep3(){
        int[][] board = {{0,0,0,0,0,0},
                         {0,1,1,0,0,0},
                         {0,1,1,0,0,0},
                         {0,0,0,1,1,0},
                         {0,0,0,1,1,0},
                         {0,0,0,0,0,0}};

        int[][] exp = { {0,0,0,0,0,0},
                        {0,1,1,0,0,0},
                        {0,1,0,0,0,0},
                        {0,0,0,0,1,0},
                        {0,0,0,1,1,0},
                        {0,0,0,0,0,0}};

        TorusGameOfLife t = new TorusGameOfLife(board);
        t.oneStep();
        assertEquals(exp, t.getBoard());
    }
    @Test
    public void TOneStep4(){
        int[][] board = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};

        int[][] exp = { {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};

        TorusGameOfLife t = new TorusGameOfLife(board);
        t.oneStep();
        assertEquals(exp, t.getBoard());
    }
    @Test
    public void TOneStep5(){
        int[][] board = {{0,0,0,0,0},
                         {0,0,0,0,0},
                         {1,1,0,1,1},
                         {0,0,0,0,0},
                         {0,0,0,0,0}};

        int[][] exp = { {0,0,0,0,0},
                        {1,0,0,0,1},
                        {1,0,0,0,1},
                        {1,0,0,0,1},
                        {0,0,0,0,0}};

        TorusGameOfLife t = new TorusGameOfLife(board);
        t.oneStep();
        assertEquals(exp, t.getBoard());
    }

    @Test
    public void TNeighbors1(){
        int[][] board = {{0,0,0,0,0},
                         {0,0,0,0,0},
                         {0,1,1,1,0},
                         {0,0,0,0,0},
                         {0,0,0,0,0}};

        TorusGameOfLife t = new TorusGameOfLife(board);
        assertEquals(3, t.Neighbors(1,2));
    }

    @Test
    public void TNeighbors2(){
        int[][] board = {{0,0,0,0,0,0},
                         {0,0,0,0,0,0},
                         {0,0,1,1,1,0},
                         {0,1,1,1,0,0},
                         {0,0,0,0,0,0},
                         {0,0,0,0,0,0}};

        TorusGameOfLife t = new TorusGameOfLife(board);
        assertEquals(2, t.Neighbors(1,2));
    }

    @Test
    public void TNeighbors3(){
        int[][] board = {{0,0,0,0,0,0},
                         {0,1,1,0,0,0},
                         {0,1,1,0,0,0},
                         {0,0,0,1,1,0},
                         {0,0,0,1,1,0},
                         {0,0,0,0,0,0}};

        TorusGameOfLife t = new TorusGameOfLife(board);
        assertEquals(4, t.Neighbors(3,3));
    }

    @Test
    public void TNeighbors4(){
        int[][] board = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};

        TorusGameOfLife t = new TorusGameOfLife(board);
        assertEquals(1, t.Neighbors(12,12));
    }

    @Test
    public void TNeighbors5(){
        int[][] board = {{0,0,0,0,0},
                         {0,0,0,0,0},
                         {1,1,0,1,1},
                         {0,0,0,0,0},
                         {0,0,0,0,0}};

        TorusGameOfLife t = new TorusGameOfLife(board);
        assertEquals(2, t.Neighbors(2,4));
    }

    @Test
    public void TEvolution1(){
        int[][] board = {{0,0,0,0,0},
                         {0,0,0,0,0},
                         {0,1,1,1,0},
                         {0,0,0,0,0},
                         {0,0,0,0,0}};

        int[][] exp = { {0,0,0,0,0},
                        {0,0,0,0,0},
                        {0,1,1,1,0},
                        {0,0,0,0,0},
                        {0,0,0,0,0}};

        TorusGameOfLife t = new TorusGameOfLife(board);
        t.Evolution(2);
        assertEquals(exp, t.getBoard());
    }
    @Test
    public void TEvolution2(){
        int[][] board = {{0,0,0,0,0,0},
                         {0,0,0,0,0,0},
                         {0,0,1,1,1,0},
                         {0,1,1,1,0,0},
                         {0,0,0,0,0,0},
                         {0,0,0,0,0,0}};

        int[][] exp = { {0,0,0,0,0,0},
                        {0,0,0,1,0,0},
                        {0,1,0,0,1,0},
                        {0,1,0,0,1,0},
                        {0,0,1,0,0,0},
                        {0,0,0,0,0,0}};

        TorusGameOfLife t = new TorusGameOfLife(board);
        t.Evolution(1);
        assertEquals(exp, t.getBoard());
    }
    @Test
    public void TEvolution3(){
        int[][] board = {{0,0,0,0,0,0},
                         {0,1,1,0,0,0},
                         {0,1,1,0,0,0},
                         {0,0,0,1,1,0},
                         {0,0,0,1,1,0},
                         {0,0,0,0,0,0}};

        int[][] exp = { {0,0,0,0,0,0},
                        {0,1,1,0,0,0},
                        {0,1,0,0,0,0},
                        {0,0,0,0,1,0},
                        {0,0,0,1,1,0},
                        {0,0,0,0,0,0}};

        TorusGameOfLife t = new TorusGameOfLife(board);
        t.Evolution(3);
        assertEquals(exp, t.getBoard());
    }
    @Test
    public void TEvolution4(){
        int[][] board = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};

        int[][] exp = { {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};

        TorusGameOfLife t = new TorusGameOfLife(board);
        t.Evolution(1);
        assertEquals(exp, t.getBoard());
    }
    @Test
    public void TEvolution5(){
        int[][] board = {{0,0,0,0,0},
                         {0,0,0,0,0},
                         {1,1,0,1,1},
                         {0,0,0,0,0},
                         {0,0,0,0,0}};

        int[][] exp = { {0,0,0,0,0},
                        {1,0,0,0,1},
                        {0,1,0,1,0},
                        {1,0,0,0,1},
                        {0,0,0,0,0}};

        TorusGameOfLife t = new TorusGameOfLife(board);
        t.Evolution(2);
        assertEquals(exp, t.getBoard());
    }


}
